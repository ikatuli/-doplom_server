package dnscrypt

import(
	"os"
	"os/exec"
	"fmt"
)

func CreateConfig(conf map[string]string) error {
	f, err := os.Create("./configuration/dnscrypt-proxy.toml") 

	if err != nil {
		return err
	}
	defer f.Close()

	f.WriteString(`# Generated by doplom server
##################################
#         Global settings        #
##################################
server_names = ['yandex']
max_clients = 250
ipv4_servers = true
`)

if conf["IPv6"] !="" {
	f.WriteString(`
ipv6_servers = true\n")
listen_addresses = ['127.0.0.1:53', '[::1]:53']
`)
} else {
	f.WriteString(`
ipv6_servers = false
listen_addresses = ['127.0.0.1:53']
`)
   }

	f.WriteString(`
dnscrypt_servers = true
doh_servers = true
odoh_servers = false
require_dnssec = false
require_nolog = false
require_nofilter = false
disabled_server_names = []
force_tcp = false
`)

fmt.Fprintln(f,"timeout = ",conf["Timeout"])

	f.WriteString(`
keepalive = 30
blocked_query_response = 'refused'
log_file = '/var/log/dnscrypt-proxy/dnscrypt-proxy.log'
log_file_latest = true
use_syslog = true
cert_refresh_delay = 240
fallback_resolvers = ['9.9.9.9:53', '8.8.8.8:53']
ignore_system_dns = true
netprobe_timeout = 60
netprobe_address = '9.9.9.9:53'
log_files_max_size = 10
log_files_max_age = 7
log_files_max_backups = 1
`)


f.WriteString(`
#########################
#        Filters        #
#########################
block_ipv6 = false
block_unqualified = true
block_undelegated = true
reject_ttl = 10
`) 

	f.WriteString(`
##################################################################################
#        Route queries for specific domains to a dedicated set of servers        #
##################################################################################
forwarding_rules = '/etc/dnscrypt-proxy/forwarding-rules.txt'
	`)

	f.WriteString(`
###############################
#        Cloaking rules       #
###############################
cloaking_rules = '/etc/dnscrypt-proxy/cloaking-rules.txt'
cloak_ttl = 600
`)

	f.WriteString(`
###########################
#        DNS cache        #
###########################
cache = true
`)

fmt.Fprintln(f,"cache_size = ",conf["Cache"])

	f.WriteString(`
cache_min_ttl = 2400
cache_max_ttl = 86400
cache_neg_min_ttl = 60
cache_neg_max_ttl = 600
`)

	f.WriteString(`
########################################
#        Captive portal handling       #
########################################

[captive_portals]
##################################
#        Local DoH server        #
##################################

[local_doh]
###############################
#        Query logging        #
###############################

## Log client queries to a file

[query_log]
format = 'tsv'

######################################################
#        Pattern-based blocking (blocklists)        #
######################################################
[blocked_names]
blocked_names_file = '/etc/dnscrypt-proxy/blocked-names.txt'

###########################################################
#        Pattern-based IP blocking (IP blocklists)        #
###########################################################

[blocked_ips]
blocked_ips_file = '/etc/dnscrypt-proxy/blocked-ips.txt'

######################################################
#   Pattern-based allow lists (blocklists bypass)   #
######################################################

[allowed_names]
allowed_names_file = '/etc/dnscrypt-proxy/allowed-names.txt'

#########################################################
#   Pattern-based allowed IPs lists (blocklists bypass) #
#########################################################

[allowed_ips]
allowed_ips_file = '/etc/dnscrypt-proxy/allowed-ips.txt'

##########################################
#        Time access restrictions        #
##########################################

[schedules]
`)

f.WriteString(`
#########################
#        Servers        #
#########################
[sources]

[sources.'public-resolvers']
urls = ['https://raw.githubusercontent.com/DNSCrypt/dnscrypt-resolvers/master/v3/public-resolvers.md', 'https://download.dnscrypt.info/resolvers-list/v3/public-resolvers.md', 'https://ipv6.download.dnscrypt.info/resolvers-list/v3/public-resolvers.md', 'https://download.dnscrypt.net/resolvers-list/v3/public-resolvers.md']
cache_file = '/var/cache/dnscrypt-proxy/public-resolvers.md'
minisign_key = 'RWQf6LRCGA9i53mlYecO4IzT51TGPpvWucNSCh1CBM0QTaLn73Y7GFO3'
refresh_delay = 72
  prefix = ''
`)

f.WriteString(`
#########################################
#        Servers with known bugs        #
#########################################

[broken_implementations]

fragments_blocked = ['cisco', 'cisco-ipv6', 'cisco-familyshield', 'cisco-familyshield-ipv6', 'cleanbrowsing-adult', 'cleanbrowsing-adult-ipv6', 'cleanbrowsing-family', 'cleanbrowsing-family-ipv6', 'cleanbrowsing-security', 'cleanbrowsing-security-ipv6']

#################################################################
#        Certificate-based client authentication for DoH        #
#################################################################

[doh_client_x509_auth]

################################
#        Anonymized DNS        #
################################

[anonymized_dns]

skip_incompatible = false

###############################
#            DNS64            #
###############################

[dns64]

########################################
#            Static entries            #
########################################

[static]
`)


    //Почему внешная команда, а не os.Rename?
	//Потому что /etc/ может находится в другой файловой системе, чем среда исполнения.
	err = exec.Command("mv","./configuration/dnscrypt-proxy.toml", "/etc/dnscrypt-proxy/dnscrypt-proxy.toml").Run()
    if err != nil {
        return err
    }

	//Перезагружаем прокси сервер 
	err = Start("restart") 
	if err != nil {
        return err
    }

	return err
	
}



func Status () string {
	cmd:=exec.Command("systemctl","is-active","dnscrypt-proxy.service")
	stdout, _ := cmd.Output()
	tmp:=string(stdout)
	return tmp[0:len(tmp)-1]
}

func Journal () string {
	cmd:=exec.Command("journalctl","-b","-u","dnscrypt-proxy.service")
	stdout, _ := cmd.Output()
	return string(stdout)
}

func Start (action string) error {
	cmd:=exec.Command("systemctl",action,"dnscrypt-proxy.service")
	err := cmd.Run()
	return err
}
