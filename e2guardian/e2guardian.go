package e2guardian

import(
	"os"
	"os/exec"
)

func CreateConfig(conf map[string]string) error {
	f, err := os.Create("./configuration/e2guardian.conf") 

	if err != nil {
		return err
	}
	defer f.Close()

	f.WriteString(`# Generated by doplom server
### QUICK_START section
language = 'russian-1251'
checkip = 127.0.0.1
extracheckports = 3128
icapport = 1344
filtergroups = 1
defaultfiltergroup = 1
### END of QUICK_START section
`)

	f.WriteString(`
### NAMES_PATHS section
servername = 'doplom"
languagedir = '/usr/share/e2guardian/languages'
### END of NAMES_PATHS section
`) 

	f.WriteString(`
### NETWORK section
###
### END of NETWORK section
`)

	f.WriteString(`
### MITM section
### END of MITM section
`)

	f.WriteString(`
#### ICAP_SERVICE section
defaulticapfiltergroup = 1
icapreqmodurl = 'request'
icapresmodurl = 'response'
### END of ICAP_SERVICE section
`)

	f.WriteString(`
### TRANSPARENT section
### END of TRANSPARENT section
`)

	f.WriteString(`
### AUTH section
maplist = 'name=defaultusermap, path=__LISTDIR__/../authplugins/filtergroupslist'
ipmaplist = 'name=ipmap, path=__LISTDIR__/../authplugins/ipgroups'
maplist = 'name=portmap, path=__LISTDIR__/../authplugins/portgroups'
authrequiresuserandgroup = on
reverseclientiplookups = off
###
### END of AUTH section
`)

f.WriteString(`
### ACCESS_LOG section
nologger = off
###
### END of ACCESS_LOG section
`)

f.WriteString(`
### MONITORING section
dstatlocation = '/var/log/e2guardian/dstats.log'
dstatinterval = 300 
### END of MONITORING section
`)

f.WriteString(`
### URL_FILTERING section
reverseaddresslookups = off
### END of URL_FILTERING section
`)

f.WriteString(`
### LIST_SETTINGS section
### END of LIST_SETTINGS section
`)

f.WriteString(`
### AV_SCANNERS section
###
###
### END of AV_SCANNERS section
`)

f.WriteString(`
### HEADER section
usexforwardedfor = off
### END of HEADER section
`)

f.WriteString(`
### BLOCK_PAGE section
### END of BLOCK_PAGE section
`)


f.WriteString(`
### DOWNLOAD_MANAGER section
downloadmanager = '/etc/e2guardian/downloadmanagers/default.conf'
### END of DOWNLOAD_MANAGER section
`)

f.WriteString(`
### PHRASES section
weightedphrasemode = 2
### END of PHRASES section
`)

f.WriteString(`
### TUNING section
### END of TUNING section
`)

f.WriteString(`
### PROCESS section
### END of PROCESS section
`)

f.WriteString(`
### DEBUG section
### END of DEBUG section
`)

    //Почему внешная команда, а не os.Rename?
	//Потому что /etc/ может находится в другой файловой системе, чем среда исполнения.
	err = exec.Command("mv","./configuration/e2guardian.conf", "/etc/e2guardian/e2guardian.conf").Run()
    if err != nil {
        return err
    }

	f1, err := os.Create("./configuration/e2guardianf1.conf")

	if err != nil {
		return err
	}
	defer f1.Close()

	//Перезагружаем прокси сервер 
	err = Start("restart") 
	if err != nil {
        return err
    }

	return err
	
}



func Status () string {
	cmd:=exec.Command("systemctl","is-active","e2guardian.service")
	stdout, _ := cmd.Output()
	tmp:=string(stdout)
	return tmp[0:len(tmp)-1]
}

func Journal () string {
	cmd:=exec.Command("journalctl","-b","-u","e2guardian.service")
	stdout, _ := cmd.Output()
	return string(stdout)
}

func Start (action string) error {
	cmd:=exec.Command("systemctl",action,"e2guardian.service")
	_, err := cmd.Output()
	return err
}
